HOOK : funciones que extienden la funcionalidad del mismo componente

1 - Se ejecutan y siempre adentro de un componente
2 - No pueden estar en ningun flujo (existe, o no existe)


PARA LIMITAR EL BOTON DE AGREGAR:
si el valor actual es menor a 8
entonces que esto pase

if( contador != 5){ contador+1}

disable true






CICLO DE VIDA :

mount (montado, por primera vez, carga estados iniciales)

update (algo paso y se redibuja)
    - El estado cambia
    - Su padre se actualizo
    - Si los props cambian

unmount




const arr = [1,2,3]

arr.forEach((elemento,indice)=>{

})

const r = arr.map((elemento,indice)=>{
    return ;
})




Promise 

const promesa = ? 
const promesa = fetch()

const promesa = new Promise((res)=>{
    res(?)
})

promesa
    .then()

promesa
    .catch()

promesa
    .then()
    .catch()


promesa
    .then((contenido)=>{
        console.log("Salio bien")
    })
    .catch((error)=>{
        console.log("Salio mal")
    })










HTTP

XHR - FETCH

CLIENTE / REQUEST

URL/IP : la direccion del servidor/recurso
METODO/VERBO : get - post - put - patch - delete 
- head - options 
BODY : la data que queres enviar (si aplica)
HEADERS : informacion de configuracion / metadata
VERSION : 1.1


SERVIDOR / RESPONSE


CODIGO : 1xx (informativos) - 2xx (respuestas correctas) 
        - 3xx (Redirecciones) - 4xx (Error del cliente) 
        - 5xx (Error del servidor)
MENSAJE : 
BODY : la data que queres enviar (si aplica)
HEADERS : informacion de configuracion / metadata
    server : 
    content-type : application/json text/plain image/jpg
VERSION : 1.1


fetch("http://google.com")

API WEB
API REST :

    http://mercagopago.com/api/users - GET
    http://mercagopago.com/api/ventas - POST